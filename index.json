[{"categories":null,"contents":"Population Count Algorithms  \u0026ldquo;Population count\u0026rdquo; means to count the number of population bits in a 64-bit word.\n Here are some algorithms to solve the problem   Lookaside table  With the Go\u0026rsquo;s init function to precompute eight lookaside table, representing the eight bytes of the 64-bit word.\nThe inint function is always used to initialize more complex variable,like data table.\nThis kind of function may not be just one, the functions will automatically execute in the order in which they are declared\n Be careful !: the init function can\u0026rsquo;t be called or referencedpackage popcount  //\tp[i] is the population count of i. var p [256]byte  func init() { \tfor i := range p { \tp[i] = p[i/2] + byte(i\u0026amp;1) \t} }  //\tPopCount returns the population count (number of set bits) of x. func PopCount(x uint64) int {  var res int = 0  for i := 0; i \u0026lt; 8; i++ { \tres += int(p[byte(x)]) \tx \u0026gt;\u0026gt;= 8  }  return res }   use the quality: x\u0026amp;(x-1) statement can clear the rightmost bit of the 64-bit word func PopCount(x uint64) int {  var res int = 0  for i := 0; i \u0026lt; 8; i++ { \tres += int(p[byte(x)]) \tx \u0026gt;\u0026gt;= 8  }  return res }  ","permalink":"stargal.github.io/posts/gopher-study/popcountalgorithm/","tags":null,"title":"PopCountAlgorithm"}]